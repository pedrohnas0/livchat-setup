name: chatwoot
category: communication
version: "3.4.0"
description: Open-source customer engagement platform

ports:
  - "3000:3000"

volumes:
  - chatwoot_data:/app/storage
  - chatwoot_public:/app/public

environment:
  # Database
  POSTGRES_HOST: postgres
  POSTGRES_PORT: 5432
  POSTGRES_DATABASE: chatwoot_production
  POSTGRES_USERNAME: postgres
  POSTGRES_PASSWORD: "{{ vault.postgres_password }}"

  # Redis
  REDIS_URL: "redis://:{{ vault.redis_password }}@redis:6379/0"
  REDIS_PASSWORD: "{{ vault.redis_password }}"

  # Rails
  RAILS_ENV: production
  RAILS_LOG_TO_STDOUT: "true"
  SECRET_KEY_BASE: "{{ vault.chatwoot_secret_key }}"

  # App Configuration
  FRONTEND_URL: "https://chat.{{ domain }}"
  FORCE_SSL: "true"
  ENABLE_ACCOUNT_SIGNUP: "false"

  # Email
  SMTP_DOMAIN: "{{ smtp_domain }}"
  SMTP_ADDRESS: "{{ smtp_host }}"
  SMTP_PORT: "{{ smtp_port }}"
  SMTP_USERNAME: "{{ smtp_user }}"
  SMTP_PASSWORD: "{{ smtp_password }}"
  SMTP_AUTHENTICATION: plain
  SMTP_ENABLE_STARTTLS: "true"
  MAILER_SENDER_EMAIL: "{{ smtp_sender }}"

  # Storage
  ACTIVE_STORAGE_SERVICE: local

deploy:
  mode: replicated
  replicas: 1
  placement:
    constraints:
      - node.role == manager
  resources:
    limits:
      memory: 2G
    reservations:
      memory: 1G

health_check:
  endpoint: http://localhost:3000/api
  interval: 30s
  timeout: 10s
  retries: 5
  start_period: 120s

dependencies:
  - postgres
  - redis

dns_prefix: chat

labels:
  - "traefik.enable=true"
  - "traefik.http.routers.chatwoot.rule=Host(`chat.{{ domain }}`)"
  - "traefik.http.routers.chatwoot.entrypoints=websecure"
  - "traefik.http.routers.chatwoot.tls.certresolver=letsencrypt"
  - "traefik.http.services.chatwoot.loadbalancer.server.port=3000"

network: livchat_network

sidekiq:
  enabled: true
  image: chatwoot/chatwoot:{{ version }}
  command: bundle exec sidekiq -C config/sidekiq.yml
  environment: same_as_main
  deploy:
    replicas: 1
    resources:
      limits:
        memory: 1G
      reservations:
        memory: 512M

post_deploy:
  - action: wait_health
    timeout: 180
  - action: wait_dependencies
    services:
      - postgres
      - redis
  - action: run_command
    command: "bundle exec rails db:chatwoot_prepare"
    container: chatwoot
  - action: create_admin
    endpoint: "/api/v1/accounts"
    method: POST
    payload:
      name: "Admin Account"
      email: "{{ admin_email }}"
      password: "{{ vault.chatwoot_password }}"