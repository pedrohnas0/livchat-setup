---
# Docker Installation Playbook for LivChat
# Multi-distribution support (Ubuntu, Debian, CentOS, Rocky, Alma, Fedora)

- name: Install Docker and Docker Compose
  hosts: all
  become: yes
  gather_facts: yes

  vars:
    docker_compose_version: "v2.24.0"
    docker_users:
      - "{{ ansible_user | default('root') }}"

    # OS-specific configuration
    docker_repo_base_url: "https://download.docker.com/linux"

    # Map ansible_distribution to Docker repo names
    docker_distro_map:
      Ubuntu: "ubuntu"
      Debian: "debian"
      CentOS: "centos"
      Rocky: "centos"  # Rocky uses CentOS repos
      AlmaLinux: "centos"  # Alma uses CentOS repos
      Fedora: "fedora"
      openSUSE: "opensuse"  # For future support

    # Get the correct distro name for Docker repos
    docker_distro: "{{ docker_distro_map[ansible_distribution] | default(ansible_distribution | lower) }}"

  tasks:
    - name: Debug - Show detected OS
      debug:
        msg: |
          Distribution: {{ ansible_distribution }}
          Version: {{ ansible_distribution_version }}
          Release: {{ ansible_distribution_release }}
          OS Family: {{ ansible_os_family }}
          Docker Distro: {{ docker_distro }}

    # Debian/Ubuntu specific tasks
    - name: Remove old Docker packages (Debian/Ubuntu)
      apt:
        name:
          - docker
          - docker-engine
          - docker.io
          - containerd
          - runc
        state: absent
      ignore_errors: yes
      when: ansible_os_family == "Debian"

    # RedHat/CentOS/Rocky/Alma specific tasks
    - name: Remove old Docker packages (RedHat-based)
      yum:
        name:
          - docker
          - docker-client
          - docker-client-latest
          - docker-common
          - docker-latest
          - docker-latest-logrotate
          - docker-logrotate
          - docker-engine
          - podman
          - buildah
        state: absent
      ignore_errors: yes
      when: ansible_os_family == "RedHat"

    - name: Install dependencies for Docker (Debian/Ubuntu)
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg
          - lsb-release
          - software-properties-common
        state: present
        update_cache: yes
      when: ansible_os_family == "Debian"

    - name: Install dependencies for Docker (RedHat-based)
      yum:
        name:
          - yum-utils
          - device-mapper-persistent-data
          - lvm2
          - ca-certificates
          - curl
        state: present
      when: ansible_os_family == "RedHat"

    # Debian/Ubuntu repository setup
    - name: Create directory for Docker keyrings (Debian/Ubuntu)
      file:
        path: /etc/apt/keyrings
        state: directory
        mode: '0755'
      when: ansible_os_family == "Debian"

    - name: Download Docker GPG key (Debian/Ubuntu)
      get_url:
        url: "{{ docker_repo_base_url }}/{{ docker_distro }}/gpg"
        dest: /etc/apt/keyrings/docker.asc
        mode: '0644'
      register: docker_gpg
      retries: 3
      delay: 5
      until: docker_gpg is succeeded
      when: ansible_os_family == "Debian"

    - name: Get distribution codename (Debian/Ubuntu)
      command: lsb_release -cs
      register: distro_codename
      changed_when: false
      when: ansible_os_family == "Debian"

    - name: Add Docker repository (Debian/Ubuntu)
      apt_repository:
        repo: "deb [arch=amd64 signed-by=/etc/apt/keyrings/docker.asc] {{ docker_repo_base_url }}/{{ docker_distro }} {{ distro_codename.stdout }} stable"
        state: present
        filename: docker
        update_cache: yes
      when: ansible_os_family == "Debian"

    # RedHat/CentOS/Rocky/Alma repository setup
    - name: Add Docker repository (RedHat-based)
      yum_repository:
        name: docker-ce
        description: Docker CE Repository
        baseurl: "{{ docker_repo_base_url }}/{{ docker_distro }}/$releasever/$basearch/stable"
        gpgkey: "{{ docker_repo_base_url }}/{{ docker_distro }}/gpg"
        gpgcheck: yes
        enabled: yes
        state: present
      when: ansible_os_family == "RedHat"

    # Fedora repository setup (special case)
    - name: Add Docker repository (Fedora)
      command: |
        dnf config-manager --add-repo {{ docker_repo_base_url }}/fedora/docker-ce.repo
      when: ansible_distribution == "Fedora"
      changed_when: true

    - name: Install Docker packages (Debian/Ubuntu)
      apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-buildx-plugin
          - docker-compose-plugin
        state: present
        update_cache: yes
      register: docker_install_deb
      retries: 3
      delay: 5
      until: docker_install_deb is succeeded
      when: ansible_os_family == "Debian"

    - name: Install Docker packages (RedHat-based)
      yum:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-buildx-plugin
          - docker-compose-plugin
        state: present
        update_cache: yes
      register: docker_install_rh
      retries: 3
      delay: 5
      until: docker_install_rh is succeeded
      when: ansible_os_family == "RedHat" and ansible_distribution != "Fedora"

    - name: Install Docker packages (Fedora)
      dnf:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-buildx-plugin
          - docker-compose-plugin
        state: present
        update_cache: yes
      register: docker_install_fed
      retries: 3
      delay: 5
      until: docker_install_fed is succeeded
      when: ansible_distribution == "Fedora"

    - name: Ensure Docker service is started and enabled
      systemd:
        name: docker
        state: started
        enabled: yes
        daemon_reload: yes

    - name: Ensure containerd service is started and enabled
      systemd:
        name: containerd
        state: started
        enabled: yes

    - name: Add users to docker group
      user:
        name: "{{ item }}"
        groups: docker
        append: yes
      loop: "{{ docker_users }}"
      when: item != "root"

    - name: Configure Docker daemon
      copy:
        content: |
          {
            "log-driver": "json-file",
            "log-opts": {
              "max-size": "10m",
              "max-file": "3"
            },
            "storage-driver": "overlay2",
            "userland-proxy": false
          }
        dest: /etc/docker/daemon.json
        mode: '0644'
      notify: restart docker

    - name: Verify Docker installation
      command: docker --version
      register: docker_version
      changed_when: false

    - name: Verify Docker Compose installation
      command: docker compose version
      register: compose_version
      changed_when: false

    - name: Run Docker hello-world test
      command: docker run --rm hello-world
      register: hello_world
      changed_when: false
      retries: 3
      delay: 5
      until: hello_world is succeeded

    - name: Display Docker installation info
      debug:
        msg: |
          âœ… Docker installed successfully!
          OS: {{ ansible_distribution }} {{ ansible_distribution_version }}
          Docker Version: {{ docker_version.stdout }}
          Compose Version: {{ compose_version.stdout }}

  handlers:
    - name: restart docker
      systemd:
        name: docker
        state: restarted
        daemon_reload: yes